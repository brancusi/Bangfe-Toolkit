package bangfe.simpleaudioplayer{	import bangfe.core.ICoreObject;		import com.greensock.TweenMax;	import com.greensock.events.LoaderEvent;	import com.greensock.loading.MP3Loader;	import com.greensock.plugins.AutoAlphaPlugin;	import com.greensock.plugins.TweenPlugin;	import com.greensock.plugins.VolumePlugin;		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import flash.events.ProgressEvent;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	import flash.net.URLRequest;		import org.osflash.signals.Signal;		import system.data.Iterator;	import system.data.collections.ArrayCollection;
		/**	 * Simple audio player. Toggle and volume. Great for background music	 * @author Will Zadikian	 * 	 */		public class SimpleAudioPlayer implements ICoreObject	{				//--------------------------------------		//  STATE CONSTANTS		//--------------------------------------				/**		 * State during playback 		 */				public static const PLAYING_STATE : String = "__playingState__";				/**		 * State during pause 		 */				public static const PAUSED_STATE : String = "__pausedState__";				//--------------------------------------		//  SIGNALS		//--------------------------------------		/**		 * Signal - Sent when the play state changes 		 */				public var stateChangedSignal : Signal = new Signal(String);				/**		 * Signal - Sent when the isReady property changes 		 */				public var isReadyChangedSignal : Signal = new Signal(Boolean);				//--------------------------------------		//  PROTECTED VARIABLES		//--------------------------------------		private var _source : String;		private var _state : String = PAUSED_STATE;		private var _sound : MP3Loader;		private var _volume : Number = .8;		private var _lastPositon : Number = 0;		private var _isPlaying : Boolean = false;		private var _isManualPause : Boolean = false;		private var _isTransitioning : Boolean = false;				private var _isReady : Boolean = false;		private var _autoPlay : Boolean = false;		private var _playlist : ArrayCollection = new ArrayCollection();		//--------------------------------------		//  PUBLIC METHODS		//--------------------------------------				/**		 * Constructor 		 * 		 */				public function SimpleAudioPlayer()		{			init();		}				public function destroy () : void		{			killAllAudio();						stateChangedSignal.removeAll();			isReadyChangedSignal.removeAll();		}				/**		 * Toggle audio play/pause		 * 		 */				public function toggle () : void		{			if(isPlaying){				pause();			}else{				resume();			}		}				/**		 * Restart the audio 		 * @param p_manualResume		 * 		 */				public function restart ( p_manualResume : Boolean = true ) : void		{			if(!_source)return;						if(p_manualResume)isManualPause = false;						if(isManualPause)return;						if(!_sound)return;						_sound.soundTime = 0;			_sound.playSound();						TweenMax.to(_sound, 1, {volume:_volume});						state = PLAYING_STATE;		}				/**		 * Pause audio		 * @param p_manualPause		 * 		 */				public function pause ( p_manualPause : Boolean = true ) : void		{			if(!_source)return;						if(!isPlaying)return;				if(p_manualPause)isManualPause = p_manualPause;						if(!_sound)return;						TweenMax.to(_sound, 1, {volume:0, onComplete:pauseComplete});						state = PAUSED_STATE;		}				/**		 * Resume audio 		 * @param p_manualResume		 * 		 */				public function resume ( p_manualResume : Boolean = true ) : void		{			if(!_source)return;						if(isPlaying)return;						if(isTransitioning)return;						if(p_manualResume)isManualPause = false;						if(isManualPause)return;						if(!_sound)return;						_sound.soundPaused = false;			TweenMax.to(_sound, 1, {volume:_volume});						state = PLAYING_STATE;		}				//--------------------------------------		//  ACCESSOR METHODS		//--------------------------------------				public function get state () : String		{			return _state;		}		public function set state ( p_state : String ) : void		{			if(_state == p_state)return;						_state = p_state;						//Dispatch the state change			stateChangedSignal.dispatch(_state);		}				/**		 * Source url for current audio 		 * @return 		 * 		 */				public function get source () : String 		{			return _source; 		}		public function set source ( p_source : String ) : void 		{ 			if(_source == p_source)return;						_source = p_source;			loadAudio();		}				/**		 * Volume of audio 		 * @return 		 * 		 */				public function get volume () : Number 		{			return _volume; 		}		public function set volume ( p_volume : Number ) : void 		{			_volume = p_volume;			if(_sound && isPlaying)TweenMax.to(_sound, 1, {volume:_volume});		}				/**		 * Is the audio player currently playing 		 * @return 		 * 		 */				public function get isPlaying () : Boolean 		{			return (state == PLAYING_STATE); 		}				/**		 * Is the audio player transitioning between resume/pause 		 * @return 		 * 		 */				public function get isTransitioning () : Boolean 		{			return _isTransitioning; 		}		public function set isTransitioning ( p_isTransitioning : Boolean ) : void 		{ 			_isTransitioning = p_isTransitioning; 		}				/**		 * Has the audio player been manually paused 		 * @return 		 * 		 */				public function get isManualPause () : Boolean 		{			return _isManualPause; 		}		public function set isManualPause ( p_isManualPause : Boolean ) : void 		{ 			_isManualPause = p_isManualPause; 		}				/**		 * Has the sound fully loaded and is ready for playback 		 * @return 		 * 		 */				public function get isReady () : Boolean		{			return _isReady;		}				/**		 * Should the player autoplay on load 		 * @return 		 * 		 */				public function get autoPlay () : Boolean		{			return _autoPlay;		}		public function set autoPlay ( p_autoPlay : Boolean) : void		{			_autoPlay = p_autoPlay;		}				/**		 * A playlist of song track URLs 		 * @return 		 * 		 */				public function get playlist () : ArrayCollection		{			return _playlist;		}		public function set playlist ( p_playlist : ArrayCollection) : void		{			_playlist = p_playlist;			playNextTrack();		}				//--------------------------------------		//  PROTECTED METHODS		//--------------------------------------		private function init () : void		{			setDefaults();		}				private function setDefaults():void		{			TweenPlugin.activate([VolumePlugin]);		}				private function addSoundListeners () : void		{			_sound.addEventListener(MP3Loader.SOUND_PLAY, soundPlayHandler, false, 0, true);			_sound.addEventListener(MP3Loader.SOUND_PAUSE, soundPauseHandler, false, 0, true);			_sound.addEventListener(MP3Loader.SOUND_COMPLETE, soundCompleteHandler, false, 0, true);		}				private function removeSoundListeners () : void		{			try{				_sound.removeEventListener(MP3Loader.SOUND_PLAY, soundPlayHandler);				_sound.removeEventListener(MP3Loader.SOUND_PAUSE, soundPauseHandler);				_sound.removeEventListener(MP3Loader.SOUND_COMPLETE, soundCompleteHandler);			}catch(e:Error){}			}				private function loadAudio () : void		{			killAllAudio();			_sound = new MP3Loader(source, {																	autoPlay:autoPlay, 																	volume:volume, 																	onOpen:loaderStartedHandler, 																	onProgress:loaderProgressHandler, 																	onComplete:loaderCompletedHandler																});						addSoundListeners();						_sound.load();		}				private function pauseComplete () : void		{			_sound.soundPaused = true;		}				private function killAllAudio () : void		{						if(_sound){				removeSoundListeners();				_sound.dispose();			}		}				private function setIsReady ( p_isReady : Boolean ) : void		{			if(_isReady == p_isReady)return;						_isReady = p_isReady;						isReadyChangedSignal.dispatch(_isReady);		}				private function playNextTrack () : void		{			//If empty and has source just restart			if(playlist.isEmpty())if(source != null)restart(false);							//Create and seek the iterator to the current track index			var it : Iterator = playlist.iterator();						it.seek(playlist.indexOf(source)+1);						//If at the end reset			if(!it.hasNext())it.reset();						//Get the next track in the collection			var nextTrackURL : String = it.next() as String;						//If the source is the same as the next track, then restart else update the source			if(nextTrackURL == source){				restart(false);			}else{				source = nextTrackURL;				}		}				//--------------------------------------		//  HANDLER METHODS		//--------------------------------------		private function soundPlayHandler ( e : LoaderEvent ) : void		{			state = PLAYING_STATE;		}				private function soundPauseHandler ( e : LoaderEvent ) : void		{			state = PAUSED_STATE;		}				private function soundCompleteHandler ( e : LoaderEvent ) : void		{			playNextTrack();		}				private function loaderStartedHandler ( e : LoaderEvent ) : void		{			setIsReady(false);		}				private function loaderProgressHandler ( e : LoaderEvent ) : void		{			setIsReady(false);		}				private function loaderCompletedHandler ( e : LoaderEvent ) : void		{			setIsReady(true);		}			}}