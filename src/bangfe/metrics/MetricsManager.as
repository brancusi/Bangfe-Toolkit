package bangfe.metrics{	import bangfe.metrics.trackers.google.IGoogleTracker;	import bangfe.metrics.trackers.google.GoogleDebugTracker;		import bangfe.metrics.trackers.omniture.IOmnitureTracker;	import bangfe.metrics.trackers.omniture.OmnitureDebugTracker;
		/**	 * The Metrics Manager. Currently supports Omniture. 	 * 	 * View examples below for usage	 * 	 * @example This example demonstrates how the shell should setup the manager in a multi swf or single swf site.	 * 	 * <listing version="1.0">	 * 	 * import bangfe.metrics.MetricsManager;	 * import bangfe.metrics.trackers.OmnitureTracker;	 * 	 * public class Shell extends Sprite {	 * 		 * 		public function Shell() {	 * 			var omnitureTracker : OmnitureTracker = new OmnitureTracker(this);	 * 			omnitureTracker.account = "001-account-id";	 *			 * 			MetricsManager.omniture = omnitureTracker;	 * 		}	 * 	 * }	 * 	 * </listing>	 * 	 * @example This example demonstrates how the sub sections should make tracking calls	 * 	 * <listing version="1.0">	 * 	 * import bangfe.metrics.MetricsManager;	 * 	 * public class SubSection extends Sprite {	 * 		 * 		public function SubSection() {	 * 				 * 			//If you need to disable debugging.	 * 			MetricsManager.debugMode = false;	 * 				 * 			//Track with omniture	 * 			MetricsManager.omniture.trackPage("/about");	 * 			MetricsManager.omniture.trackLink("Sub Section", "http://google.com", "e");	 * 		}	 * }	 * 	 * </listing>	 * 	 * @author Will Zadikian	 * 	 */		public class MetricsManager	{		//--------------------------------------		//  STATIC VARIABLES		//--------------------------------------		//Trackers		private static var _omnitureTracker : IOmnitureTracker;		private static var _googleTracker : IGoogleTracker;				private static var _debugMode : Boolean = true;		private static var _productionMode : Boolean = false;		//--------------------------------------		//  CLASS METHODS		//--------------------------------------		/**		 * A IOmnitureTracker. This should be set in the shell swf if the <code>MetricsManager</code> 		 * is being used in a multi swf site		 * @return		 * 		 */				public static function get omniture () : IOmnitureTracker 		{			if(_omnitureTracker == null)omniture = new OmnitureDebugTracker();			return _omnitureTracker as IOmnitureTracker		}				public static function set omniture ( p_omnitureTracker : IOmnitureTracker ) : void		{			_omnitureTracker = p_omnitureTracker;			_omnitureTracker.debugMode = debugMode;		}				/**		 * A IGoogleTracker. This should be set in the shell swf if the <code>MetricsManager</code> 		 * is being used in a multi swf site		 * @return 		 * 		 */				public static function get google () : IGoogleTracker 		{			if(_googleTracker == null)google = new GoogleDebugTracker();			return _googleTracker as IGoogleTracker		}				public static function set google ( p_googleTracker : IGoogleTracker ) : void		{			_googleTracker = p_googleTracker;		}				/**		 * Should track in debug mode. Will trace back information 		 * @return 		 * 		 */		public static function get debugMode () : Boolean 		{			return _debugMode;		}				public static function set debugMode ( p_debugMode : Boolean ) : void		{			if(productionMode)return;						_debugMode = p_debugMode;			omniture.debugMode = _debugMode;		}				/**		 * Production mode can only be set once. Once it has been set it will disable all future changes.		 *  This protects against sub sections turning on debug mode accidentally		 * @return 		 * 		 */				public static function get productionMode () : Boolean 		{			return _productionMode;		}				public static function set productionMode ( p_productionMode : Boolean ) : void		{			if(_productionMode)return;			_productionMode = p_productionMode;			if(_productionMode){				_debugMode = false;				omniture.debugMode = false;			}		}			}}