package bangfe.metrics.trackers.google{	import com.google.analytics.GATracker;	import com.google.analytics.core.TrackerMode;		import flash.display.DisplayObjectContainer;
		/**	 * 	 * This is a Google Metrics Tracking wrapper. Please reference the google metrics documentation	 * for google specific concepts	 * 	 * @see bangfe.metrics.trackers.OmnitureTracker	 * @see bangfe.metrics.trackers.ComScoreBeaconTracker	 * @see bangfe.metrics.trackers.VideoCensusTracker	 * 	 * @example This example demonstrates a simple page track:	 * 	 * <listing version="3.0">	 * 	 * 	protected function testGoogle () : void	 * 	{	 * 		//Set the scope to be used for all trackers. If you need	 * 		//to set scope manually for a tracker, you must create the tracker	 * 		//manually and add it to the mgr via addTracker()	 * 		MetricsManager.SCOPE = this;	 * 	 * 		var google : GoogleTracker = MetricsManager.getTracker(GoogleTracker) as GoogleTracker;	 * 		var ga : GATracker = google.gaTracker;	 * 		ga.account = "UA-714811-1";	 * 			 * 		//This runs the GA Build method. This must be called before you track anything	 * 		google.build();	 * 			 * 		//Track page	 * 		ga.trackPageview("/testPage");	 * 	}	 * 	 * </listing>	 * 	 */		public class GoogleTracker implements IGoogleTracker	{		//--------------------------------------		//  PRIVATE VARIABLES		//--------------------------------------		private var _gaTracker : GATracker;				private var _scope : DisplayObjectContainer;		private var _gaID : String;		private var _debugMode : Boolean = false;				//--------------------------------------		//  PUBLIC METHODS		//--------------------------------------				/**		 * Constructor 		 * @param p_scope DisplayObjectContainer to use for the google's scope property		 * 		 */				public function GoogleTracker ( p_scope : DisplayObjectContainer, p_gaID : String ) : void		{			scope = p_scope;			gaID = p_gaID;			init();		}				/**		 * Track a page view 		 * @param p_page		 * 		 */				public function trackPage ( p_page : String ) : void		{			gaTracker.trackPageview(p_page);		}				/**		 * @param p_category The general event category (e.g. "Videos").         * @param p_label The action for the event (e.g. "Play").          * @param p_label An optional descriptor for the event.         * @param p_value An optional value to be aggregated with the event. 		 * 		 */				public function trackEvent ( p_category : String, p_action : String, p_label : String = null, p_value : Number = NaN ) : void		{			gaTracker.trackEvent(p_category, p_action, p_label, p_value);		}				//--------------------------------------		//  ACCESSOR		//--------------------------------------				/**		 * GATracker instance 		 * @return 		 * 		 */				public function get gaTracker () : GATracker		{			return _gaTracker;		}				/**		 * Scope to add the tracker to  		 * @return 		 * 		 */				public function get scope () : DisplayObjectContainer		{			return _scope;		}		public function set scope ( p_scope : DisplayObjectContainer) : void		{			_scope = p_scope;		}				/**		 * The google ID 		 * @return 		 * 		 */				public function get gaID () : String 
		{
			return _gaID;
		}
		
		public function set gaID ( p_gaID : String ) : void
		{
			_gaID = p_gaID;
		}				/**		 * Debug mode 		 * @return 		 * 		 */				public function get debugMode () : Boolean { return false; };		public function set debugMode ( p_debugMode : Boolean ) : void {};				//--------------------------------------		//  PROTECTED METHODS		//--------------------------------------		/** @private */		protected function init () : void		{			GATracker.autobuild = false;						_gaTracker = new GATracker(scope, gaID);						_gaTracker.mode = TrackerMode.AS3;			_gaTracker.config.sessionTimeout = 60;			_gaTracker.config.conversionTimeout = 180;						_gaTracker.build();		}	}}