package bangfe.metrics.trackers.omniture{	import com.omniture.AppMeasurement;		import flash.display.Sprite;		import system.data.collections.ArrayCollection;	import system.data.maps.HashMap;		/**	 * This report was developed by the team at Lunchbox. Part of the thermos framework 	 * @author bangfe	 * 	 */		public class OmnitureReport	{				//--------------------------------------		//  EVENT TYPES		//--------------------------------------		/**		 * Event Tracking Type. Use when tracking an event		 */				public static const EVENT : String = "event";				/**		 * Link Tracking Type. Use when tracking a link click		 */				public static const LINK : String = "link";				/**		 * View Tracking Type. Use when viewing a page 		 */				public static const VIEW : String = "view";				//--------------------------------------		//  LINK TYPES		//--------------------------------------		/**		 * Custom Link Type 		 */				public static const CUSTOM_LINK : String = "o";				/**		 * Exit Link Type		 */				public static const EXIT_LINK : String = "e";				/**		 * Download Link Type 		 */				public static const DOWNLOAD_LINK : String = "d";				/**		 * Link Enum 		 */				public static const LINK_TYPE_ENUM : Array = ["o", "e", "d"];				//--------------------------------------		//  CLASS METHODS		//--------------------------------------		private var _type : String = EVENT;		private var _pageName : String = "";		private var _link : Object;		private var _eventCollection : ArrayCollection = new ArrayCollection();		private var _propMap : HashMap = new HashMap();		private var _eVarMap : HashMap = new HashMap();		private var _productCollection : ArrayCollection = new ArrayCollection();		private var _channel : String = "";				//--------------------------------------		//  CLASS METHODS		//--------------------------------------		/**		 * Constructor  		 * @param p_type		 * 		 */		public function OmnitureReport ( p_type : String = EVENT )		{			_type = p_type;		}				/**		 * Add an event to the report 		 * @param p_name		 * 		 */				public function addEvent ( p_name : String ) : void		{			_eventCollection.add(p_name);		}				/**		 * Add a prop to the report 		 * @param p_name Name of the prop		 * @param p_value Value for the prop		 * 		 */				public function addProp ( p_name : String, p_value : String ) : void		{			_propMap.put(p_name, p_value);		}				/**		 * Add an eVar to the report 		 * @param p_name Name of the eVar		 * @param p_value Value for the eVar		 * 		 */				public function addEvar ( p_name : String, p_value : String ) : void		{			_eVarMap.put(p_name, p_value);		}				/**		 * Set a link for the report 		 * @param p_url -  	The URL that identifies the clicked 		 * 					link. If you do not want to specify a URL, use an 		 * 					empty string ("") for the url parameter. If no URL is		 * 					specified, trackLink uses the name parameter to 		 * 					identify the clicked link		 * 		 * @param p_name -	The name that appears in the link 		 * 					report. If you do not want to specify a name, use an 		 * 					empty string ("") for the name parameter. If no 		 * 					name is specified, trackLink uses the url parameter 		 * 					to identify the clicked link		 * 		 * @param p_type -	A letter code that specifies the link 		 * 					report that should display the URL or name. 		 * 					Supported values include:		 * 						o: Custom Links report		 * 						d: File Downloads report		 * 						e: Exit Links report		 * 		 */					public function setLink ( p_url : String, p_name : String, p_type:String = CUSTOM_LINK ) : void		{			_link = { url:p_url, name:p_name, type:p_type };		}				/**		 * 		 * @param p_productID		 * @param p_category		 * @param p_quantity		 * @param p_price		 * 		 */				public function addProduct ( p_productID : String, p_category : String = "", p_quantity : int = 1, p_price : Number = 0 ) : void		{			var product : String = "";			product += (p_category != "" && p_category != null)?((p_category + ";")):(";");			product += (p_productID + ";");			product += (p_quantity + ";");			product += (p_price);						_productCollection.add(product);		}				/**		 * Clear the report 		 * 		 */				public function clear () : void		{			_type = "";			_pageName = "";			_eventCollection.clear()			_link = {};			_propMap.clear();			_eVarMap.clear()			_channel = "";			_productCollection.clear();		}				/**		 * To String method for the report. Will dump a string of all the values 		 * @return 		 * 		 */				public function toString () : String		{			return "To String";		}				//--------------------------------------		//  ACCESSOR/MUTATOR METHODS		//--------------------------------------		/**		 * The type of report. Event, View or Link		 *  		 * @return 		 * 		 */		public function get type () : String		{			return _type;		}				public function set type ( p_type : String) : void		{			_type = p_type;		}				/**		 * Page name. Example: /home 		 * @return 		 * 		 */				public function get pageName () : String		{			return _pageName;		}		public function set pageName ( p_pageName : String) : void		{			_pageName = p_pageName;		}				/**		 * Link object. Contains link information		 * 		 * Object structure as follows:		 * { linkType:"o", pageURL:"http://google.com", linkName:"Link Name" }		 *  		 * 		 * @return 		 * 		 */				public function get link () : Object		{			return _link;		}				/**		 * Event collection. Contains a list of event names 		 * @return 		 * 		 */				public function get eventCollection () : ArrayCollection		{			return _eventCollection;		}				public function set eventCollection ( p_eventCollection : ArrayCollection) : void		{			_eventCollection = p_eventCollection;		}				/**		 * prop hashmap. Contains key value pairs of props 		 * @return 		 * 		 */				public function get propMap () : HashMap		{			return _propMap;		}				public function set propMap ( p_propMap : HashMap) : void		{			_propMap = p_propMap;		}				/**		 * eVar hashmap. Contains key value pairs of eVars 		 * @return 		 * 		 */				public function get eVarMap () : HashMap		{			return _eVarMap;		}				public function set eVarMap ( p_eVarMap : HashMap) : void		{			_eVarMap = p_eVarMap;		}				/**		 * The product 		 * @return 		 * 		 */				public function get productCollection () : ArrayCollection		{			return _productCollection;		}				/**		 * The channel 		 * @return 		 * 		 */				public function get channel () : String		{			return _channel;		}				public function set channel ( p_channel : String) : void		{			_channel = p_channel;		}			}}