package bangfe.metrics.trackers.omniture{		import com.omniture.AppMeasurement;		import flash.display.DisplayObjectContainer;		import system.data.Iterator;	import system.data.maps.HashMap;
		/**	 * This is a concrete <code>IOmnitureTracker</code>.	 * @author Will Zadikian	 * 	 */	public class OmnitureTracker implements IOmnitureTracker	{				//--------------------------------------		//  ERROR MESSAGES		//--------------------------------------		public static const LINK_TYPE_ERROR_MESSAGE : String = "The linkType provided is not valid. Use one of the following: 'o' (Custom Links), 'd' (File Downloads), and 'e' (Exit Links)";				//--------------------------------------		//  PRIVATE VARIABLES		//--------------------------------------		//Setup		private var _scope : DisplayObjectContainer;		private var _appMeasurment : AppMeasurement;				//Configuration		private var _account : String = "defaultAccountID";		private var _dc : String = "112";		private var _currencyCode : String = "UTF-8";		private var _charSet : String = "USD"		private var _trackingServer : String = "trackingserver.local";		private var _movieID : String = "defaultMovieID";				//State properties		private var _debugMode : Boolean = false;		private var _isReady : Boolean = false;		private var _trackClickMap : Boolean = true;				private var _trackingQueue : Array = [];		//--------------------------------------		//  PUBLIC METHODS		//--------------------------------------		/**		 * Constructor 		 * @param p_scope		 * 		 */		public function OmnitureTracker( p_scope : DisplayObjectContainer ) : void		{			scope = p_scope;			init();		}				/**		 * @inheritDoc		 */		public function track ( p_report : OmnitureReport, p_clearOldValues : Boolean = true ) : void		{			if(p_clearOldValues)clearAll();						//determine the type of report:			switch( p_report.type ) {				case OmnitureReport.LINK:					trackLink(p_report); 					break;				case OmnitureReport.VIEW:					trackView(p_report);					break;				case OmnitureReport.EVENT:					trackEvent(p_report);					break;			}		}						//--------------------------------------		//  ACCESSOR METHODS		//--------------------------------------		/**		 * Required value for web analytics account names. Multiple account names should be comma separated with no spaces.		 * @return 		 * 		 */				public function get account () : String		{			return _account;		}				public function set account ( p_account : String ) : void		{			_account = p_account;			appMeasurement.account = _account;		}				/**		 * The AppMeasurement instance 		 * @return 		 * 		 */				public function get appMeasurement () : AppMeasurement		{			return _appMeasurment;		}				public function get dc () : String		{			return _dc;		}		public function set dc ( p_dc : String ) : void		{			_dc = p_dc;			appMeasurement.dc = _dc;		}				/**		 * The currency code to use in reporting. Default is USD		 * @return 		 * 		 */				public function get currencyCode () : String		{			return _currencyCode;		}		public function set currencyCode ( p_currencyCode : String ) : void		{			_currencyCode = p_currencyCode;			appMeasurement.currencyCode = _currencyCode;		}				/**		 * The character set to use in reporting. Default is UTF-8 		 * @return 		 * 		 */				public function get charSet () : String		{			return _charSet;		}		public function set charSet ( p_charSet : String ) : void		{			_charSet = p_charSet;			appMeasurement.charSet = _charSet;		}				/**		 * The tracking server to use for reporting 		 * @return 		 * 		 */				public function get trackingServer () : String		{			return _trackingServer;		}		public function set trackingServer ( p_trackingServer : String ) : void		{			_trackingServer = p_trackingServer;			appMeasurement.trackingServer = _trackingServer; 		}				/**		 * Should track click map be enabled 		 * @return 		 * 		 */				public function get trackClickMap () : Boolean		{			return _trackClickMap;		}		public function set trackClickMap ( p_trackClickMap : Boolean ) : void		{			_trackClickMap = p_trackClickMap;			appMeasurement.trackClickMap = _trackClickMap;		}				/**		 * The movie id to use for click map 		 * @return 		 * 		 */				public function get movieID () : String		{			return _movieID;		}		public function set movieID ( p_movieID : String ) : void		{			_movieID = p_movieID;			appMeasurement.movieID = _movieID;		}				/**		 * Should the tracker show debug information 		 * @return 		 * 		 */				public function get debugMode () : Boolean		{			return _debugMode;		}		public function set debugMode ( p_debugMode : Boolean ) : void		{			if(_debugMode == p_debugMode)return;			_debugMode = p_debugMode;						if(_debugMode){				appMeasurement.debugTracking = true;				appMeasurement.trackLocal = true;			}else{				appMeasurement.debugTracking = false;				appMeasurement.trackLocal = false;			}		}				/**		 * The scope that the actionsource should be added to. This most commonly is the main		 * stage		 * 		 * @return 		 * 		 */		public function get scope () : DisplayObjectContainer		{			return _scope;		}				public function set scope ( p_scope : DisplayObjectContainer ) : void		{			_scope = p_scope;			if(appMeasurement != null)_scope.addChild(appMeasurement);		}				//--------------------------------------		//  PRIVATE METHODS		//--------------------------------------		private function init () : void		{			setupOmnitureTracker();		}				private function setupOmnitureTracker () : void		{			//Create new actionsource instance			_appMeasurment = new AppMeasurement();						//Apply default config			appMeasurement.account = account;			appMeasurement.dc = dc;			appMeasurement.currencyCode = currencyCode;			appMeasurement.charSet = charSet;			appMeasurement.trackingServer = trackingServer;						//Apply trackClickMap			appMeasurement.trackClickMap = trackClickMap;			appMeasurement.movieID = movieID;						if(scope != null)scope.addChild(appMeasurement);					}				private function trackLink ( p_report : OmnitureReport ) : void		{			if(!isLinkTypeValid(p_report.link.type))throw new Error(LINK_TYPE_ERROR_MESSAGE);						prepCall(p_report);			appMeasurement.trackLink(p_report.link.url, p_report.link.type, p_report.link.name);		}				private function trackView ( p_report : OmnitureReport ) : void		{			prepCall(p_report);			appMeasurement.track();		}				private function trackEvent ( p_report : OmnitureReport ) : void		{			prepCall(p_report);			appMeasurement.track();		}				private function prepCall ( p_report : OmnitureReport ) : void		{			//Apply props:			applyValues(p_report.propMap);						//Apply eVars:			applyValues(p_report.eVarMap);						//Apply events:			appMeasurement.events = p_report.eventCollection.toArray().toString();						//Set products:			appMeasurement.products = p_report.productCollection.toArray().toString();						//Set channel:			appMeasurement.channel = p_report.channel;						//Set Page			appMeasurement.pageName = p_report.pageName;		}				private function applyValues ( p_hashMap : HashMap ) : void		{			var it : Iterator = p_hashMap.iterator();			while(it.hasNext()){				var value : String = it.next();				var key : String = it.key();				appMeasurement[key] = value;			}			}				private function clearAll () : void		{			appMeasurement.clearVars();						appMeasurement.pageName = "";			appMeasurement.eventList = null;			appMeasurement.productList = null;						//Clear Props			for(var i : int = 0; i < 100; i++){				appMeasurement["prop" + i] = "";			}						//Clear Evars			for(var j : int = 0; j < 100; j++){				appMeasurement["eVar" + j] = "";			}		}				//--------------------------------------		//  HELPER METHODS		//--------------------------------------		private function isLinkTypeValid ( p_linkType : String ) : Boolean		{			var foundMatch : Boolean = false;						for each (var item : String in OmnitureReport.LINK_TYPE_ENUM){				if(item == p_linkType)foundMatch = true;			}						return foundMatch;		}				}}