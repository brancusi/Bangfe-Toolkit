package bangfe.metrics.trackers{		import com.omniture.ActionSource;		import flash.display.DisplayObjectContainer;		/**	 * This is a concrete <code>IOmnitureTracker</code>.	 * @author Will Zadikian	 * 	 */	public class OmnitureTracker implements IOmnitureTracker	{				//--------------------------------------		//  PUBLIC STATIC CONSTANTS		//--------------------------------------		public static const LINK_TYPE_ERROR_MESSAGE : String = "The linkType provided is not valid. Use one of the following: 'o' (Custom Links), 'd' (File Downloads), and 'e' (Exit Links)";			//--------------------------------------		//  PRIVATE STATIC CONSTANTS		//--------------------------------------		private static const LINK_TYPE_ENUM : Array = ["o", "e", "d"];				//--------------------------------------		//  PRIVATE VARIABLES		//--------------------------------------		//Setup		private var _scope : DisplayObjectContainer;		private var _actionSource : ActionSource;				//Configuration		private var _account : String = "defaultAccountID";		private var _dc : String = "112";		private var _currencyCode : String = "UTF-8";		private var _charSet : String = "USD"		private var _trackingServer : String = "trackingserver.local";		private var _movieID : String = "defaultMovieID";				//State properties		private var _debugMode : Boolean = false;		private var _isReady : Boolean = false;		private var _trackClickMap : Boolean = true;				private var _trackingQueue : Array = [];		//--------------------------------------		//  PUBLIC METHODS		//--------------------------------------		public function OmnitureTracker( p_scope : DisplayObjectContainer ) : void		{			scope = p_scope;			init();		}				/**		 * @inheritDoc		 */		public function trackPage ( p_pageName : String ) : void		{			actionSource.pageName = p_pageName;			actionSource.track();		}				/**		 * @inheritDoc		 */			public function trackLink ( p_linkName : String, p_pageURL:String = "", p_linkType : String = "o" ) : void		{			if(!isLinkTypeValid(p_linkType))throw new Error(LINK_TYPE_ERROR_MESSAGE);						actionSource.trackLink(p_pageURL, p_linkType, p_linkName);		}				/**		 * @inheritDoc		 */		public function track ( ...args ) : void		{			actionSource.clearVars();						for(var i : int = 0; i < args.length; i++ ){				var item : Object = args[i] as Object;				actionSource[item.key] = item.value;					}			actionSource.track();		}				//--------------------------------------		//  ACCESSOR METHODS		//--------------------------------------		/**		 * Required value for web analytics account names. Multiple account names should be comma separated with no spaces.		 * @return 		 * 		 */				public function get account () : String		{			return _account;		}				public function set account ( p_account : String ) : void		{			_account = p_account;			actionSource.account = _account;		}				/**		 * The actionsource instance 		 * @return 		 * 		 */				public function get actionSource () : ActionSource		{			return _actionSource;		}				public function get dc () : String		{			return _dc;		}		public function set dc ( p_dc : String ) : void		{			_dc = p_dc;			actionSource.dc = _dc;		}				/**		 * The currency code to use in reporting. Default is USD		 * @return 		 * 		 */				public function get currencyCode () : String		{			return _currencyCode;		}		public function set currencyCode ( p_currencyCode : String ) : void		{			_currencyCode = p_currencyCode;			actionSource.currencyCode = _currencyCode;		}				/**		 * The character set to use in reporting. Default is UTF-8 		 * @return 		 * 		 */				public function get charSet () : String		{			return _charSet;		}		public function set charSet ( p_charSet : String ) : void		{			_charSet = p_charSet;			actionSource.charSet = _charSet;		}				/**		 * The tracking server to use for reporting 		 * @return 		 * 		 */				public function get trackingServer () : String		{			return _trackingServer;		}		public function set trackingServer ( p_trackingServer : String ) : void		{			_trackingServer = p_trackingServer;			actionSource.trackingServer = _trackingServer; 		}				/**		 * Should track click map be enabled 		 * @return 		 * 		 */				public function get trackClickMap () : Boolean		{			return _trackClickMap;		}		public function set trackClickMap ( p_trackClickMap : Boolean ) : void		{			_trackClickMap = p_trackClickMap;			actionSource.trackClickMap = _trackClickMap;		}				/**		 * The movie id to use for click map 		 * @return 		 * 		 */				public function get movieID () : String		{			return _movieID;		}		public function set movieID ( p_movieID : String ) : void		{			_movieID = p_movieID;			actionSource.movieID = _movieID;		}				/**		 * Should the tracker show debug information 		 * @return 		 * 		 */				public function get debugMode () : Boolean		{			return _debugMode;		}		public function set debugMode ( p_debugMode : Boolean ) : void		{			if(_debugMode == p_debugMode)return;			_debugMode = p_debugMode;						if(_debugMode){				actionSource.debugTracking = true;				actionSource.trackLocal = true;			}else{				actionSource.debugTracking = false;				actionSource.trackLocal = false;			}		}				/**		 * The scope that the actionsource should be added to. This most commonly is the main		 * stage		 * 		 * @return 		 * 		 */		public function get scope () : DisplayObjectContainer		{			return _scope;		}				public function set scope ( p_scope : DisplayObjectContainer ) : void		{			_scope = p_scope;			if(actionSource != null)_scope.addChild(actionSource);		}				//--------------------------------------		//  PRIVATE METHODS		//--------------------------------------		private function init () : void		{			setupOmnitureTracker();		}				private function setupOmnitureTracker () : void		{			//Create new actionsource instance			_actionSource = new ActionSource();						//Apply default config			actionSource.account = account;			actionSource.dc = dc;			actionSource.currencyCode = currencyCode;			actionSource.charSet = charSet;			actionSource.trackingServer = trackingServer;						//Apply trackClickMap			actionSource.trackClickMap = trackClickMap;			actionSource.movieID = movieID;						if(scope != null)scope.addChild(actionSource);		}				//--------------------------------------		//  HELPER METHODS		//--------------------------------------		private function isLinkTypeValid ( p_linkType : String ) : Boolean		{			var foundMatch : Boolean = false;			for each (var item : String in LINK_TYPE_ENUM){				if(item == p_linkType)foundMatch = true;			}						return foundMatch;		}				}}